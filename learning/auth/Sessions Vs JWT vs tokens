Sessions:
- server stores session data, and we create a session data, and send it to the user
CREATE TABLE sessions (
    session_id VARCHAR(255) PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    created_at TIMESTAMP,
    expires_at TIMESTAMP
);

flow:
- user login, we check for user name / pwd
- create a unique session id(with duration, 1-2 weeks), maybe a remmber me functionallity- 
 and store it in the database/memory/redis
- send the session id to the broswer

user request -> has session ID -> check database -> allow/deny access

requets work:
- broswer sends a cookie with the session id
- the server get a request with a session id (the cookie)
- looking up session info in storage (sql requsts probably)
- if there is found a session id, we know who the user is, awesome
- if not found, we ask the user to log in again.

Storage:
- the session ID, that the server send to the client, stored in a cookie.


expired sessions:
- we delete the expires sessions 



******** Cookies: ********
- pieces of text data stored in your broswer
- domain specific, each webstites has its own cookies.
- send with every request to that domain.

my understanding:
- each website has cookiets related to it 

why cookies:
- cookies are storage mechanisem in the broswer , instead of localStorage
instead of:
// Frontend would need to manually store data
localStorage.setItem('sessionId', 'abc123') (in the frontend react)

// Frontend would need to manually add to EVERY request
fetch('/api/profile', {
  headers: {
    'Authorization': localStorage.getItem('sessionId')
  }

  with cookies: we sets the cookies inside the server:
  / Server sets cookie
res.cookie('sessionId', 'abc123');

// That's it! Browser automatically sends it with EVERY request
// No need to write any code to send it
fetch('/api/profile');  // Cookie is automatically included

you also get:
- automatic sending with requests
- automatic domain restriction and expiration handling
- httponly - cant acess by javascript

the benefit:
- instead of store it in local storage, you get a lot of 
things storing session data in cookies


how they works:
- we send the cookie in response header - so we create 
the cookies in the server, and send the response with it
- its automatically set the cookies to that domain
- broswer store the cookie
- for requests to that domain, we send them the coockies

Types of Cookies:

Session Cookies

Deleted when browser closes
No expiration date set


Persistent Cookies

Have expiration date
Stay until that date


Third-party Cookies

From different domains (like ads)
Often used for tracking

my take:
we create the cookies in the server, basically we set the cookies in the server

we create the cookies for that domain specifically - cookie set by myapp.com only works for that domain

so without cookies, we will need to store it in the local storage, where cookies is just a storing mechanisem that give us some benefites?

the cookies iteself are stored in the brosewr, like local storage?

for short:
both are storing mechanisem, where cookies is better

HttpOnly Cookie vs Regular Cookie:


// Regular Cookie - JavaScript can access this
res.cookie('regular', 'value');
document.cookie // Can read this cookie in frontend

// HttpOnly Cookie - JavaScript cannot access this
res.cookie('secure', 'value', { httpOnly: true });
document.cookie // Cannot see or access this cooki

***** JWT *******:

- digital passport for users
- no need to check the database for each requests
- we have the:
  -header: the token type
  - payload :the actual data of the user: userId, username, ...
  - signature: verifies token hasn't been tampered with - a digital password, with secret key



how it works:
- user log in
- server verifies credentials, and create json web tokn
- server sends the jwt to client
- client sends jwt with requeests
- server verifies jwt signature and gets user info from the token itself

difference with sessions:
- no server storage needed - stateless
- user info in token
- server just verify signuatre

with cookies:
- cookie is just a storing mechanisem, for the token
- store the jwt (the tokens) in http cookies is greate
- protecess from XSS, automatically send with requests.
sotage:
- local storage and send in header:
// A. Store in localStorage and send in header
so we need to add the token in the header
localStorage.setItem('token', jwt);
fetch('/api/data', {
  headers: {
    'Authorization': `Bearer ${localStorage.getItem('token')}`
  }

// C. Store in HttpOnly cookie (most secure)
// Server sets it:
res.cookie('token', jwt, { httpOnly: true });

// Browser automatically sends it, no need to set headers

When to Use Each:
Sessions are better when:

You need to invalidate sessions immediately (security requirements)
Your user data changes frequently
You're dealing with sensitive data (banking, health)
You want to limit simultaneous user sessions

JWTs are better when:

You're building a distributed system/microservices
You need stateless authentication
You're building mobile APIs
You want to reduce database load
You want simpler scaling

takewaways:
what is the difference between httponly cookie to a cookie? it just a cookit with httponly set to true?

so this is what json web token:

its a token, that we create in the server and sends the user to store.

than the user store it, either in localstorage or cookie or variable (cookie prefer).

than, the user sends the token in the request header.

than, jwt has a function to verify that user based his token - the token itself, has the user data inside of it encrypte, and jwt has a method to identify who is the user.

so, if we able to idetnify the user, meaning it exist, we give acess, if not, than no.

and the main difference - here we are not interacting with the database to idetnify user, but we just use the builtin method that able to get the user data that is encrypted in the token, right?

LOGIN:
1. User logs in ➜ Server creates JWT with user data inside
2. Server sends token to user
3. User stores token (preferably in HttpOnly cookie)

SUBSEQUENT REQUESTS:
1. User makes request with token
2. Server uses jwt.verify() to decode token
3. If valid ➜ Server knows user identity from token data
4. If invalid ➜ Server denies access

KEY DIFFERENCE FROM SESSIONS:
Sessions: Check database to identify user
JWT: Extract user data from token itself

