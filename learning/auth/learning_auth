Auth fundamentals:
endpoints:

- endpoints are interafaces to your backend application.
- this is the way for users to interact with our backend/database
- its the mechanisem which users interact with the backend
- and we need them to interact with our backend to be able to authenticate
- each endpoint has a url path, that interact with different route handler
- and a http method

pwd security:

- never store plain passwords in db, we will use hashing, which is a transformation of the password
- we will use bcrypt library

JSON web tokens: JWT:

- transmit information secuerly as a json object
  - header, payload (data), signature
  - we encode it to be long string
  - should not have sensetive data
- you can set expiration date, so he won't need to log in again
- each user get a token, json web token, its like their own id
- they use it with each requests, so we can identify it - it contain information about them - we will verify who they are, so we wont need password each requests

Without a secret key:

Anyone could create a fake ticket (token) with any userId
They could just write { userId: 123 } and claim to be any user
There's no way to verify if the ticket is genuine

With a secret key:

The token is like a ticket with a special watermark (signature)
Only your server knows the secret to create this watermark
If someone tries to create a fake token (ticket), they won't have the right watermark

Authentication flows:
Registration:

- user send email and password
- we hashes the pws
- store in the database users
- CREATE a jwt json web token in register - Instead of making them log in right after, we give them a token

login:

- user sends email pwd
- server checks hashed password - compare between hashed pwd to user pwd
- if correct, create a token contains user information
- send the token to the user
- user store the token in local storage
- user make request with the token in header
- server verifies token -> knows who the users is

Protected routs:

- user sends reuqets with token
- server verifies token
- if valid, allow acess

app flow:
register:
endpoint -> check if its valid(name,email,pwd) -> pwd hashing -> store the user in db

login:
endpoint -> check credentials -> create a token -> send token to user -> redirect to app

JWT:

What is JWT and why we need it:

JWT is a way to securely transmit information between parties (client and server)
It's like a secure ID card that:

Proves who the user is
Can't be faked (it's cryptographically signed)
Contains user information (like id, email)

Cookies:

Are just a storage mechanism in the browser
Can store any data (tokens, preferences, etc.)
Like a label the browser attaches to requests

javascriptCopy// Server sets cookie
res.cookie('theme', 'dark', {
httpOnly: true,
secure: true
});

JWT VS SESSIONS:
JWT (Token-based):

Stateless:

Server doesn't store anything
All user info is in the token itself
Each request carries all needed information

hash functions

- maps variable sized inputs to fixed size outputs
- meaning take an arbirtary length, and maps it to a ceratin output
